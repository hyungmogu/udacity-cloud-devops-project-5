apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml
    kompose.version: 1.28.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: server-db
  name: server-db
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: server-db
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml
        kompose.version: 1.28.0 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/backend-default: "true"
        io.kompose.service: server-db
    spec:
      containers:
        - env:
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                configMapKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: env
            - name: AWS_OBJECT_EXPIRES_IN
              valueFrom:
                configMapKeyRef:
                  key: AWS_OBJECT_EXPIRES_IN
                  name: env
            - name: AWS_S3_BUCKET
              valueFrom:
                configMapKeyRef:
                  key: AWS_S3_BUCKET
                  name: env
            - name: AWS_S3_REGION
              valueFrom:
                configMapKeyRef:
                  key: AWS_S3_REGION
                  name: env
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                configMapKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: env
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  key: POSTGRES_DB
                  name: env
            - name: POSTGRES_HOST
              valueFrom:
                configMapKeyRef:
                  key: POSTGRES_HOST
                  name: env
            - name: POSTGRES_PASSWORD
              valueFrom:
                configMapKeyRef:
                  key: POSTGRES_PASSWORD
                  name: env
            - name: POSTGRES_PORT
              valueFrom:
                configMapKeyRef:
                  key: POSTGRES_PORT
                  name: env
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  key: POSTGRES_USER
                  name: env
          image: postgres:13.1
          livenessProbe:
            exec:
              command:
                - sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'
            failureThreshold: 3
            periodSeconds: 10
            timeoutSeconds: 3
          name: server-db
          ports:
            - containerPort: 5432
          resources: {}
      restartPolicy: Always
status: {}
