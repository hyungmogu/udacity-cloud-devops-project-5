version: 2.1

orbs:
  slack: circleci/slack@4.12.0

commands:
    notify_slack_error:
        steps:
            - slack/notify:
                event: fail
                template: basic_fail_1

    notify_slack_pass:
        steps:
            - slack/notify:
                event: pass
                template: basic_success_1
    
    destroy_environment:
        description: Destroy back-end and front-end cloudformation stacks given a workflow ID.  
        steps:
            - run:
                name: Clean S3 folder
                when: on_fail
                command: |
                    aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

            - run:
                name: Destroy environments
                when: on_fail
                command: |
                    aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
                    aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
    
    revert-migrations:
        description: Revert the last migration if successfully run in the current workflow.
        steps:
            - run:
                name: Revert migrations
                when: on_fail
                command: |
                    # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
                    SUCCESS=$(curl --insecure https://kvdb.io/ShY8QxnYQUEWMjENPC2DHt/migration_${CIRCLE_WORKFLOW_ID:0:7});
                    echo $SUCCESS;
                    if(( $SUCCESS==1 )); 
                    then
                        cd ~/project/backend;
                        npm install;
                        #  Add revert code here. You can find this in the Getting Started section.
                        npm run migrations:revert
                    fi

jobs:
    build-frontend:
        docker:
            - image: node:18.14-buster
        steps:
            - checkout
            - run:
                name: Build front-end
                command: |
                    cd frontend
                    make build_local
            - save_cache:
                paths: [frontend/node_modules]
                key: frontend-build
            - notify_slack_error
            - notify_slack_pass

    build-backend:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - restore_cache: # **restores saved dependency cache if the Branch key template or requirements.txt files have not changed since the previous run**
                key: &deps1-cache deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
            - run:
                name: Back-end build
                command: |
                    cd backend
                    make build_local
            - save_cache:
                key: *deps1-cache
                paths:
                    - "venv"
            - notify_slack_error
            - notify_slack_pass

    test-frontend:
        docker:
            - image: node:18.14-buster
        steps:
            - checkout
            - restore_cache:
                keys: [frontend-build]
            - run:
                name: Run frontend test
                command: |
                    # Your code here
                    cd frontend
                    make test_local
            - notify_slack_error
            - notify_slack_pass

    test-backend:
        docker:
            - image: node:13.8-buster
        steps:
            - checkout
            - restore_cache:
                keys: [backend-build]
            - run:
                name: Run backend test
                command: |
                    # Your code here
                    cd backend
                    make test_local
            - notify_slack_error
            - notify_slack_pass

    scan-frontend:
        docker:
            - image: node:13.8-buster
        steps:
            - checkout
            - restore_cache:
                keys: [frontend-build]
            - run:
                name: Run frontend scan
                command: |
                    # Your job code here
                    cd frontend
                    make audit_local
            - notify_slack_error
            - notify_slack_pass

    scan-backend:
        docker:
            - image: node:13.8-buster
        steps:
            - checkout
            - restore_cache:
                keys: [backend-build]
            - run:
                name: Run backend scan
                command: |
                    # Your job code here
                    cd backend
                    make audit_local
            - notify_slack_error
            - notify_slack_pass
    
    deploy-infrastructure:
        docker:
            # Docker image here that supports AWS CLI
            - image: node:13.8-buster
        steps:
            # Checkout code from git
            - checkout
            - run:
                name: Update packages
                command: |
                    apt update
            - run:
                name: Install tar and gzip
                command: |
                    apt-get -y install tar gzip
            - run:
                name: Install dependencies (AWS-Cli)
                command: |
                    apt-get -y install awscli
            - run:
                name: Ensure back-end infrastructure exists
                command: |
                    aws cloudformation deploy \
                    --template-file .circleci/files/backend.yml \
                    --tags project=udapeople \
                    --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
            - run:
                name: Ensure front-end infrastructure exist
                command: |
                    aws cloudformation deploy \
                    --template-file .circleci/files/frontend.yml \
                    --tags project=udapeople \
                    --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
            - run:
                name: Add back-end ip to ansible inventory
                command: |
                    # Your code here
                    aws ec2 describe-instances \
                    --query 'Reservations[*].Instances[*].PublicIpAddress' \
                    --output text >> .circleci/ansible/inventory.txt 
            - persist_to_workspace:
                root: .circleci/ansible/
                paths:
                    - inventory.txt
            # Here's where you will add some code to rollback on failure
            - destroy_environment
            - notify_slack_error
            - notify_slack_pass
            
    configure-infrastructure:
        docker:
            - image: node:13.8-buster
        steps:
            - checkout
            - add_ssh_keys:
                # You can get this ID in the section where you registered the SSH Key
                fingerprints: ["07:1b:74:a1:a7:95:0f:c3:a1:17:b2:ed:d8:79:9c:a0"] 
            - attach_workspace:
                at: .circleci/ansible/
            - run:
                name: Update packages
                command: |
                    apt update
            - run:
                name: Install Ansible
                command: |
                    # Install Ansible
                    apt-get -y install ansible
            - run:
                name: Install dependencies (AWS-Cli)
                command: |
                    apt-get -y install awscli
            - run:
                name: Run Playbook and Configure server
                no_output_timeout: 30m
                command: |
                    # Your command
                    cd .circleci/ansible
                    ansible-playbook -i inventory.txt configure-server.yml
            # Here's where you will add some code to rollback on failure
            - destroy_environment 
            - notify_slack_error
            - notify_slack_pass
                    
    run-migrations:
        docker:
            - image: node:13.8-buster
        steps:
            - checkout
            - restore_cache:
                keys: [backend-build]
            - run:
                name: Update packages
                command: |
                    apt update
            - run:
                name: Install dependencies (CURL)
                command: |
                    apt-get -y install curl
            - run:
                name: Install dependencies (AWS-Cli)
                command: |
                    apt-get -y install awscli
            - run:
                name: Run migrations
                command: |
                    # Your code here
                    cd backend
                    npm install
                    npm run migrations > migrations_dump.txt
            - run:
                name: Send migration results to kvdb.io
                command: |
                    # Your code here
                    if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
                    then
                        # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
                        # curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
                        # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                        curl https://kvdb.io/ShY8QxnYQUEWMjENPC2DHt/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
                    fi
            # Here's where you will add some code to rollback on failure
            - destroy_environment 
            - revert-migrations
            - notify_slack_error
            - notify_slack_pass

    deploy-frontend:
        docker:
            # Docker image here that supports AWS CLI
            - image: node:13.8-buster
        steps:
            # Checkout code from git
            - checkout
            - run:
                name: Update packages
                command: |
                    apt update
            - run:
                name: Install dependencies (tar)
                command: |
                    apt-get -y install tar
            - run:
                name: Install dependencies (AWS-Cli)
                command: |
                    apt-get -y install awscli
            - run:
                name: Get backend url
                command: |
                    # your code here
                    export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
                    export API_URL="http://${BACKEND_IP}:3030"
                    echo "${API_URL}"
                    echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
      
                    cat frontend/.env
            - run:
                name: Deploy frontend objects
                command: |
                    # your code here
                    cd frontend
                    npm install

                    npm run build
                    tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
                    aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            # Here's where you will add some code to rollback on failure
            - destroy_environment 
            - revert-migrations
            - notify_slack_error
            - notify_slack_pass
    
    deploy-backend:
        docker:
            # Docker image here that supports Ansible
            - image: node:13.8-buster
        steps:
            # Checkout code from git
            - checkout
            # Add ssh keys with fingerprint
            - add_ssh_keys:
                # You can get this ID in the section where you registered the SSH Key
                fingerprints: ["07:1b:74:a1:a7:95:0f:c3:a1:17:b2:ed:d8:79:9c:a0"]
            # attach workspace
            - attach_workspace:
                at: .circleci/ansible/
            - run:
                name: Update packages
                command: |
                    apt update
            - run:
                name: Install dependencies (Tar)
                command: |
                    apt-get -y install tar
            - run:
                name: Install dependencies (AWS-Cli)
                command: |
                    apt-get -y install awscli
            - run: 
                name: Install dependencies (Ansible)
                command: |
                    apt-get -y install ansible
            - run:
                name: Deploy backend
                command: |
                    # your code here
                    cd backend
                    npm i
                    npm run build
                    cd ..
                    # Zip the directory
                    tar -C backend -czvf artifact.tar.gz .
                    echo "Contents  of the inventory.txt file is -------"
                    cd .circleci/ansible
                    cat inventory.txt
                    ansible-playbook -i inventory.txt deploy-backend.yml
            # Here's where you will add some code to rollback on failure
            - destroy_environment 
            - revert-migrations 
            - notify_slack_error
            - notify_slack_pass 

    smoke-test:
        docker:
            # Lightweight Docker image 
            - image: node:13.8-buster
        steps:
            # Checkout code from git
            - checkout
            - run:
                name: Update packages
                command: |
                    apt update
            - run:
                name: Install dependencies (Curl)
                command: |
                    apt-get -y install curl
            - run:
                name: Install dependencies (AWS-Cli)
                command: |
                    apt-get -y install awscli
            - run:
                name: Backend smoke test.
                command: |
                    BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
                    API_URL="http://${BACKEND_IP}:3030"
                    echo "API URL: ${API_URL}"

                    # your code here
                    # Fetch and prepare the BACKEND_IP env var
                    if curl "${API_URL}/api/status" | grep "ok"
                    then
                        exit 0
                    else
                        exit 1
                    fi
            - run:
                name: Frontend smoke test.
                command: |
                    # your code here
                    URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
                    echo ${URL} 
                    if curl -s ${URL} | grep "Welcome"
                    then
                        # Change this to 0 after the job fails
                        exit 0
                    else
                        exit 1
                    fi
            # Here's where you will add some code to rollback on failure
            - destroy_environment 
            - revert-migrations
            - notify_slack_error
            - notify_slack_pass   

    cloudfront-update:
        docker:
            # Docker image here that supports AWS CLI
            - image: node:13.8-buster
        steps:
            # Checkout code from git
            - checkout
            - run:
                name: Update packages
                command: |
                    apt update
            - run:
                name: Install dependencies (AWS-Cli)
                command: |
                    apt-get -y install awscli
            - run:
                name: Update cloudfront distribution
                command: |
                    # your code here
                    aws cloudformation deploy \
                    --template-file .circleci/files/cloudfront.yml \
                    --stack-name InitialStack \
                    --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --tags project=udapeople
            # Here's where you will add some code to rollback on failure
            - destroy_environment 
            - revert-migrations
            - notify_slack_error
            - notify_slack_pass
    
    cleanup:
        docker:
            # Docker image here
            - image: node:13.8-buster
        steps:
            # Checkout code from git
            - checkout
            - run:
                name: Get old stack workflow id
                command: |
                    # your code here
                    export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
                    echo OldWorkflowID: "${OldWorkflowID}"
                    echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
                    # Fetch the stack names          
                    export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
                    echo Stack names: "${STACKS[@]}" 
            - run:
                name: Remove old stacks and files
                command: |
                    if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
                    then
                        # your code here
                        aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                        aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                        aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
                    fi
            - destroy_environment 
            - revert-migrations
            - notify_slack_error
            - notify_slack_pass

workflows:
    default:
        jobs:
            - build-frontend
            - build-backend
            - test-frontend:
                requires: [build-frontend]
            - test-backend:
                requires: [build-backend]
            - scan-frontend:
                requires: [build-frontend]
            - scan-backend:
                requires: [build-backend]
            - deploy-infrastructure:
                requires: [test-frontend, test-backend, scan-frontend, scan-backend]
                filters:
                    branches:
                        only: [test-feature-branch]
            - configure-infrastructure:
                requires: [deploy-infrastructure]
            - run-migrations:
                requires: [configure-infrastructure]
            - deploy-frontend:
                requires: [run-migrations]
            - deploy-backend:
                requires: [run-migrations]
            - smoke-test:
                requires: [deploy-backend, deploy-frontend]
            - cloudfront-update:
                requires: [smoke-test]
            - cleanup:
                requires: [cloudfront-update]
