version: 2.1

orbs:
  slack: circleci/slack@4.12.0

commands:
    # notify_slack_error:
    #     steps:
    #         - slack/notify:
    #             event: fail
    #             template: basic_fail_1

    # notify_slack_pass:
    #     steps:
    #         - slack/notify:
    #             event: pass
    #             template: basic_success_1
    check_aws_status_front_end:
        description: Checks for front-end cloudformation events before destroy. For debugging purpose.  
        steps:
            - run:
                name: See description of what happened (Frontend)
                when: on_fail
                command: |
                    aws cloudformation describe-stack-events --stack-name img-converter-frontend-${CIRCLE_WORKFLOW_ID:0:7}
    check_aws_status_server:
        description: Checks for server cloudformation events before destroy. For debugging purpose.  
        steps:
            - run:
                name: See description of what happened (server)
                when: on_fail
                command: |
                    aws cloudformation describe-stack-events --stack-name img-converter-kubernetes-server-${CIRCLE_WORKFLOW_ID:0:7}
    check_aws_status_server_cp:
        description: Checks for server control plane cloudformation events before destroy. For debugging purpose.  
        steps:
            - run:
                name: See description of what happened (server control plane)
                when: on_fail
                command: |
                    aws cloudformation describe-stack-events --stack-name img-converter-kubernetes-server-cp-${CIRCLE_WORKFLOW_ID:0:7}
    check_aws_status_network:
        description: Checks for network cloudformation events before destroy. For debugging purpose.  
        steps:
            - run:
                name: See description of what happened (network)
                when: on_fail
                command: |
                    aws cloudformation describe-stack-events --stack-name img-converter-kubernetes-network-${CIRCLE_WORKFLOW_ID:0:7}
    destroy_environment:
        description: Destroy kubernetes server and front-end cloudformation stacks given a workflow ID.  
        steps:                    
            - run:
                name: Destroy environments
                when: on_fail
                command: |
                    aws cloudformation delete-stack --stack-name img-converter-kubernetes-network-${CIRCLE_WORKFLOW_ID:0:7}
                    aws cloudformation delete-stack --stack-name img-converter-frontend-${CIRCLE_WORKFLOW_ID:0:7}
                    aws cloudformation delete-stack --stack-name img-converter-kubernetes-server-cp-${CIRCLE_WORKFLOW_ID:0:7}
                    aws cloudformation delete-stack --stack-name img-converter-kubernetes-server-${CIRCLE_WORKFLOW_ID:0:7}
    
jobs:
    build-frontend:
        docker:
            - image: node:18.14-buster
        steps:
            - checkout
            - run:
                name: Build front-end
                command: |
                    cd frontend;
                    make build_local;
            - save_cache:
                paths: [frontend/node_modules]
                key: frontend-build
            # - notify_slack_error
            # - notify_slack_pass

    build-microservice-gateway:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - run:
                name: Run Build for Micoservice Gateway
                command: |
                    cd microservices/gateway
                    make build_local
            - run:
                name: Checking Directory
                command: |
                    cd microservices/gateway
                    ls -al
            - save_cache:
                key: v1-dependencies-{{ .Environment.CIRCLE_WORKFLOW_ID }}-{{ checksum "microservices/gateway/requirements.txt" }}
                paths:
                    - "microservices/gateway/venv"
            # - notify_slack_error
            # - notify_slack_pass
    
    build-microservice-jpg:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - run:
                name: Run Build for Microservice Server Jpg
                command: |
                    cd microservices/server-jpg
                    make build_local
            - run:
                name: Checking Directory
                command: |
                    cd microservices/server-jpg
                    ls -al
            - save_cache:
                key: v1-dependencies-{{ .Environment.CIRCLE_WORKFLOW_ID }}-{{ checksum "microservices/server-jpg/requirements.txt" }}
                paths:
                    - "microservices/server-jpg/venv"
            # - notify_slack_error
            # - notify_slack_pass

    build-microservice-png:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - run:
                name: Run Build for Microservice Server Png
                command: |
                    cd microservices/server-png
                    make build_local
            - run:
                name: Checking Directory
                command: |
                    cd microservices/server-png
                    ls -al
            - save_cache:
                key: v1-dependencies-{{ .Environment.CIRCLE_WORKFLOW_ID }}-{{ checksum "microservices/server-png/requirements.txt" }}
                paths:
                    - "microservices/server-png/venv"
            # - notify_slack_error
            # - notify_slack_pass
    
    build-microservice-webp:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - run:
                name: Run Build for Microservice Webp
                command: |
                    cd microservices/server-webp
                    make build_local
            - run:
                name: Checking Directory
                command: |
                    cd microservices/server-webp
                    ls -al
            - save_cache:
                key: v1-dependencies-{{ .Environment.CIRCLE_WORKFLOW_ID }}-{{ checksum "microservices/server-webp/requirements.txt" }}
                paths:
                    - "microservices/server-webp/venv"
            # - notify_slack_error
            # - notify_slack_pass

    test-frontend:
        docker:
            - image: node:18.14-buster
        steps:
            - checkout
            - restore_cache:
                keys: [frontend-build]
            - run:
                name: Run frontend test
                command: |
                    cd frontend
                    make test_local
            # - notify_slack_error
            # - notify_slack_pass

    test-microservice-gateway:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - restore_cache:
                keys:
                    - v1-dependencies-{{ .Environment.CIRCLE_WORKFLOW_ID }}-{{ checksum "microservices/gateway/requirements.txt" }}
                    - v1-dependencies-
            - run:
                name: Checking Project Root Directory
                command: |
                    ls -al
            - run:
                name: Checking Directory
                command: |
                    cd microservices/gateway
                    ls -al
            - run:
                name: Run Test for Microservice Server Gateway
                command: |
                    cd microservices/gateway
                    make test_local
            # - notify_slack_error
            # - notify_slack_pass
    
    test-microservice-server-jpg:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - restore_cache:
                keys:
                    - v1-dependencies-{{ .Environment.CIRCLE_WORKFLOW_ID }}-{{ checksum "microservices/server-jpg/requirements.txt" }}
                    - v1-dependencies-
            - run:
                name: Checking Project Root Directory
                command: |
                    ls -al
            - run:
                name: Checking Directory
                command: |
                    cd microservices/server-jpg
                    ls -al
            - run:
                name: Run Test for Microservice Server Jpg
                command: |
                    cd microservices/server-jpg
                    make test_local
            # - notify_slack_error
            # - notify_slack_pass
    
    test-microservice-server-png:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - restore_cache:
                keys:
                    - v1-dependencies-{{ .Environment.CIRCLE_WORKFLOW_ID }}-{{ checksum "microservices/server-png/requirements.txt" }}
                    - v1-dependencies-
            - run:
                name: Checking Project Root Directory
                command: |
                    ls -al
            - run:
                name: Checking Directory
                command: |
                    cd microservices/server-png
                    ls -al
            - run:
                name: Run Test for Microservice Server Png 
                command: |
                    cd microservices/server-png
                    make test_local
            # - notify_slack_error
            # - notify_slack_pass
    
    test-microservice-server-webp:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - restore_cache:
                keys:
                    - v1-dependencies-{{ .Environment.CIRCLE_WORKFLOW_ID }}-{{ checksum "microservices/server-webp/requirements.txt" }}
                    - v1-dependencies-
            - run:
                name: Checking Project Root Directory
                command: |
                    ls -al
            - run:
                name: Checking Directory
                command: |
                    cd microservices/server-webp
                    ls -al
            - run:
                name: Run Test for Microservice Server Webp
                command: |
                    cd microservices/server-webp
                    make test_local
            # - notify_slack_error
            # - notify_slack_pass

    scan-frontend:
        docker:
            - image: node:13.8-buster
        steps:
            - checkout
            - restore_cache:
                keys: [frontend-build]
            - run:
                name: Run frontend scan
                command: |
                    cd frontend
                    make scan_local
            # - notify_slack_error
            # - notify_slack_pass

    scan-microservice-gateway:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - restore_cache:
                keys:
                    - v1-dependencies-{{ .Environment.CIRCLE_WORKFLOW_ID }}-{{ checksum "microservices/gateway/requirements.txt" }}
                    - v1-dependencies-
            - run:
                name: Scan Microservice Server Gateway
                command: |
                    cd microservices/gateway
                    make scan_local
            # - notify_slack_error
            # - notify_slack_pass
    
    scan-microservice-server-jpg:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - restore_cache:
                keys:
                    - v1-dependencies-{{ .Environment.CIRCLE_WORKFLOW_ID }}-{{ checksum "microservices/server-jpg/requirements.txt" }}
                    - v1-dependencies-
            - run:
                name: Scan Microservice Server Jpg
                command: |
                    cd microservices/server-jpg
                    make scan_local
            # - notify_slack_error
            # - notify_slack_pass
    
    scan-microservice-server-png:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - restore_cache:
                keys:
                    - v1-dependencies-{{ .Environment.CIRCLE_WORKFLOW_ID }}-{{ checksum "microservices/server-png/requirements.txt" }}
                    - v1-dependencies-
            - run:
                name: Scan Microservice Server Png
                command: |
                    cd microservices/server-png
                    make scan_local
            # - notify_slack_error
            # - notify_slack_pass
    
    scan-microservice-server-webp:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - restore_cache:
                keys:
                    - v1-dependencies-{{ .Environment.CIRCLE_WORKFLOW_ID }}-{{ checksum "microservices/server-webp/requirements.txt" }}
                    - v1-dependencies-
            - run:
                name: Scan Microservice Server Webp
                command: |
                    cd microservices/server-webp
                    make scan_local
            # - notify_slack_error
            # - notify_slack_pass
    
    deploy-infrastructure-network:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - run:
                name: Update packages
                command: |
                    apt update
            - run:
                name: Install tar and gzip
                command: |
                    apt-get -y install tar gzip
            - run:
                name: Install dependencies (AWS-Cli)
                command: |
                    apt-get -y install awscli
            - run:
                name: Ensure Kubernetes Network Infrastructure exists
                command: |
                    CURRENT_DIR=$(pwd);
                    aws cloudformation deploy \
                    --template-file .circleci/aws/network.yml \
                    --stack-name "img-converter-kubernetes-network-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --parameter-overrides "file://$CURRENT_DIR/.circleci/aws/network-parameters.json" \
                    --tags project=img-converter type=network
            - check_aws_status_network
            - destroy_environment
            # - notify_slack_error
            # - notify_slack_pass

    deploy-infrastructure-server:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - run:
                name: Update packages
                command: |
                    apt update
            - run:
                name: Install tar and gzip
                command: |
                    apt-get -y install tar gzip
            - run:
                name: Install dependencies (AWS-Cli)
                command: |
                    apt-get -y install awscli
            - run:
                name: Ensure Kubernetes Server Infrastructure exists
                no_output_timeout: 20m
                command: |
                    CURRENT_DIR=$(pwd);
                    aws cloudformation deploy \
                    --template-file .circleci/aws/server.yml \
                    --stack-name "img-converter-kubernetes-server-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --parameter-overrides "file://$CURRENT_DIR/.circleci/aws/server-parameters.json" \
                    --tags project=img-converter type=server
            - check_aws_status_server
            - destroy_environment
            # - notify_slack_error
            # - notify_slack_pass

    deploy-infrastructure-server-cp:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - run:
                name: Update packages
                command: |
                    apt update
            - run:
                name: Install tar and gzip
                command: |
                    apt-get -y install tar gzip
            - run:
                name: Install dependencies (AWS-Cli)
                command: |
                    apt-get -y install awscli
            - run:
                name: Ensure Kubernetes Server Infrastructure for Control Plane exists
                no_output_timeout: 20m
                command: |
                    CURRENT_DIR=$(pwd);
                    aws cloudformation deploy \
                    --template-file .circleci/aws/server-control-plane.yml \
                    --stack-name "img-converter-kubernetes-server-cp-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --parameter-overrides "file://$CURRENT_DIR/.circleci/aws/server-control-plane-parameters.json" \
                    --tags project=img-converter type=control-plane
            - check_aws_status_server_cp
            - destroy_environment
            # - notify_slack_error
            # - notify_slack_pass

    deploy-infrastructure-frontend:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - run:
                name: Update packages
                command: |
                    apt update
            - run:
                name: Install tar and gzip
                command: |
                    apt-get -y install tar gzip
            - run:
                name: Install dependencies (AWS-Cli)
                command: |
                    apt-get -y install awscli
            - run:
                name: Ensure front-end infrastructure exist
                no_output_timeout: 20m
                command: |
                    CURRENT_DIR=$(pwd);
                    aws cloudformation deploy \
                    --template-file .circleci/aws/frontend.yml \
                    --stack-name "img-converter-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
                    --tags project=img-converter type=frontend
            - check_aws_status_front_end
            - destroy_environment
            # - notify_slack_error
            # - notify_slack_pass

    update-ansible-ips:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - run:
                name: Update packages
                command: |
                    apt update
            - run:
                name: Install tar and gzip
                command: |
                    apt-get -y install tar gzip
            - run:
                name: Install dependencies (AWS-Cli)
                command: |
                    apt-get -y install awscli
            - run:
                name: Add server control plane ip to ansible inventory
                command: |
                    echo "[control-plane]" >> .circleci/ansible/inventory.txt;
                    aws ec2 describe-instances \
                    --filters Name=tag-project,Values=img-converter Name=tag-type,Values=control-plane \
                    --query 'Reservations[*].Instances[*].PublicIpAddress' \
                    --output text >> .circleci/ansible/inventory.txt 
            - run:
                name: Check Ansible output
                command: |
                    cat .circleci/ansible/inventory.txt
            - run:
                name: Add server Server ip to ansible inventory
                command: |
                    echo "[server]" >> .circleci/ansible/inventory.txt;
                    aws ec2 describe-instances \
                    --filters Name=tag-project,Values=img-converter Name=tag-type,Values=server \
                    --query 'Reservations[*].Instances[*].PublicIpAddress' \
                    --output text >> .circleci/ansible/inventory.txt 
            - run:
                name: Check Ansible output
                command: |
                    cat .circleci/ansible/inventory.txt
            - persist_to_workspace:
                root: .circleci/ansible/
                paths:
                    - inventory.txt
            # - destroy_environment
            # - notify_slack_error
            # - notify_slack_pass

    deploy-frontend:
        docker:
            - image: node:13.8-buster
        steps:
            - checkout
            - run:
                name: Update packages
                command: |
                    apt update
            - run:
                name: Install dependencies (tar)
                command: |
                    apt-get -y install tar
            - run:
                name: Install dependencies (AWS-Cli)
                command: |
                    apt-get -y install awscli
            - run:
                name: Get backend url
                command: |
                    export KUBERNETES_SERVER_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
                    export API_URL="http://${KUBERNETES_SERVER_IP}:8010"
                    echo "${API_URL}"
                    echo API_URL="http://${KUBERNETES_SERVER_IP}:8010" >> frontend/.env
      
                    cat frontend/.env
            - run:
                name: Deploy frontend objects
                command: |
                    cd frontend
                    npm install

                    npm run build
                    tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
                    aws s3 cp dist s3://img-converter-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            # - destroy_environment 
            # - notify_slack_error
            # - notify_slack_pass
    
    deploy-microservice-gateway:
        docker:
            - image: cimg/base:2021.04
        steps:
            - checkout
            - setup_remote_docker
            - run:
                name: Deploy containers to Docker Hub
                command: |
                    cd microservices/gateway;
                    make deploy;
            # - destroy_environment 
            # - notify_slack_error
            # - notify_slack_pass
    
    deploy-microservice-server-jpg:
        docker:
            - image: cimg/base:2021.04
        steps:
            - checkout
            - setup_remote_docker
            - run:
                name: Deploy containers to Docker Hub
                command: |
                    cd microservices/server-jpg;
                    make deploy;
            # - destroy_environment
            # - notify_slack_error
            # - notify_slack_pass
    
    deploy-microservice-server-png:
        docker:
            - image: cimg/base:2021.04
        steps:
            - checkout
            - setup_remote_docker
            - run:
                name: Deploy Microservice Png
                command: |
                    cd microservices/server-png
                    make deploy
            # - destroy_environment
            # - notify_slack_error
            # - notify_slack_pass
    
    deploy-microservice-server-webp:
        docker:
            - image: cimg/base:2021.04
        steps:
            - checkout
            - setup_remote_docker
            - run:
                name: Deploy containers to Docker Hub
                command: |
                    cd microservices/server-webp;
                    make deploy;
            # - destroy_environment
            # - notify_slack_error
            # - notify_slack_pass
    
    configure-infrastructure:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - add_ssh_keys:
                fingerprints: ["07:1b:74:a1:a7:95:0f:c3:a1:17:b2:ed:d8:79:9c:a0"] 
            - attach_workspace:
                at: .circleci/ansible/
            - run:
                name: Update packages
                command: |
                    apt update
            - run:
                name: Install Ansible
                command: |
                    apt-get -y install ansible
            - run:
                name: Install dependencies (AWS-Cli)
                command: |
                    apt-get -y install awscli
            - run:
                name: Run Playbook and Configure server
                no_output_timeout: 30m
                command: |
                    cd .circleci/ansible
                    ansible-playbook -i inventory.txt configure-server.yml
            - destroy_environment 
            # - notify_slack_error
            # - notify_slack_pass

    smoke-test:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - run:
                name: Update packages
                command: |
                    apt update
            - run:
                name: Install dependencies (Curl)
                command: |
                    apt-get -y install curl
            - run:
                name: Install dependencies (AWS-Cli)
                command: |
                    apt-get -y install awscli
            - run:
                name: Backend smoke test.
                command: |
                    KUBERNETES_SERVER_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
                    API_URL="http://${KUBERNETES_SERVER_IP}:8010"
                    echo "API URL: ${API_URL}"

                    if curl "${API_URL}/api/status" | grep "ok"
                    then
                        exit 0
                    else
                        exit 1
                    fi
            - run:
                name: Frontend smoke test.
                command: |
                    URL="http://img-converter-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
                    echo ${URL} 
                    if curl -s ${URL} | grep "Welcome"
                    then
                        exit 0
                    else
                        exit 1
                    fi
            - destroy_environment 
            # - notify_slack_error
            # - notify_slack_pass   

    cloudfront-update:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - run:
                name: Update packages
                command: |
                    apt update
            - run:
                name: Install dependencies (AWS-Cli)
                command: |
                    apt-get -y install awscli
            - run:
                name: Update cloudfront distribution
                command: |
                    aws cloudformation deploy \
                    --template-file .circleci/aws/cloudfront.yml \
                    --stack-name InitialStack \
                    --parameter-overrides WorkflowID="img-converter-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --tags project=img-converter
            - destroy_environment 
            # - notify_slack_error
            # - notify_slack_pass
    
    cleanup:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - run:
                name: Get old stack workflow id
                command: |
                    export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
                    echo OldWorkflowID: "${OldWorkflowID}"
                    echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
                    # Fetch the stack names          
                    export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
                    echo Stack names: "${STACKS[@]}" 
            - run:
                name: Remove old stacks and files
                command: |
                    if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
                    then
                        aws s3 rm "s3://img-converter-${OldWorkflowID}" --recursive
                        aws cloudformation delete-stack --stack-name "img-converter-kubernetes-server-cp-${OldWorkflowID}"
                        aws cloudformation delete-stack --stack-name "img-converter-kubernetes-server-${OldWorkflowID}"
                        aws cloudformation delete-stack --stack-name "img-converter-frontend-${OldWorkflowID}"
                    fi
            - destroy_environment 
            # - notify_slack_error
            # - notify_slack_pass

workflows:
    default:
        jobs:
            - build-frontend
            - build-microservice-gateway
            - build-microservice-jpg
            - build-microservice-png
            - build-microservice-webp
            - test-frontend:
                requires: [build-frontend]
            # - test-microservice-gateway:
            #     requires: [build-microservice-gateway]
            - test-microservice-server-jpg:
                requires: [build-microservice-jpg]
            - test-microservice-server-png:
                requires: [build-microservice-png]
            - test-microservice-server-webp:
                requires: [build-microservice-webp]
            - scan-frontend:
                requires: [build-frontend]
            - scan-microservice-gateway:
                requires: [build-microservice-gateway]
            - scan-microservice-server-jpg:
                requires: [build-microservice-jpg]
            - scan-microservice-server-png:
                requires: [build-microservice-png]
            - scan-microservice-server-webp:
                requires: [build-microservice-webp]
            - deploy-infrastructure-network:
                requires: [test-frontend, test-microservice-server-jpg, test-microservice-server-png, test-microservice-server-webp, scan-frontend, scan-microservice-gateway, scan-microservice-server-jpg, scan-microservice-server-png, scan-microservice-server-webp]
            - deploy-infrastructure-server:
                requires: [deploy-infrastructure-network]
            - deploy-infrastructure-server-cp:
                requires: [deploy-infrastructure-network]
            - deploy-infrastructure-frontend:
                requires: [deploy-infrastructure-network]
            - update-ansible-ips:
                requires: [deploy-infrastructure-server, deploy-infrastructure-server-cp, deploy-infrastructure-frontend]
            - deploy-frontend:
                requires: [update-ansible-ips]
            - deploy-microservice-gateway:
                requires: [update-ansible-ips]
            - deploy-microservice-server-jpg:
                requires: [update-ansible-ips]
            - deploy-microservice-server-png:
                requires: [update-ansible-ips]
            - deploy-microservice-server-webp:
                requires: [update-ansible-ips]            
            - configure-infrastructure:
                requires: [deploy-frontend, deploy-microservice-gateway, deploy-microservice-server-jpg, deploy-microservice-server-png, deploy-microservice-server-webp]
            - smoke-test:
                requires: [configure-infrastructure]
            - cloudfront-update:
                requires: [smoke-test]
            - cleanup:
                requires: [cloudfront-update]
