version: 2.1

orbs:
  slack: circleci/slack@4.12.0
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3

commands:
    # notify_slack_error:
    #     steps:
    #         - slack/notify:
    #             event: fail
    #             template: basic_fail_1

    # notify_slack_pass:
    #     steps:
    #         - slack/notify:
    #             event: pass
    #             template: basic_success_1

    check_aws_status_front_end:
        description: Checks for front-end cloudformation events before destroy. For debugging purpose.  
        steps:
            - run:
                name: See description of what happened (Frontend)
                when: on_fail
                command: |
                    aws cloudformation describe-stack-events --stack-name image-converter-frontend-${CIRCLE_WORKFLOW_ID:0:7}
    check_aws_status_kubernetes:
        description: Checks for server control plane cloudformation events before destroy. For debugging purpose.  
        steps:
            - run:
                name: See description of what happened (Kubernetes)
                when: on_fail
                command: |
                    aws cloudformation describe-stack-events --stack-name image-converter-kubernetes-${CIRCLE_WORKFLOW_ID:0:7}
    check_aws_status_network:
        description: Checks for network cloudformation events before destroy. For debugging purpose.  
        steps:
            - run:
                name: See description of what happened (network)
                when: on_fail
                command: |
                    aws cloudformation describe-stack-events --stack-name image-converter-kubernetes-network-${CIRCLE_WORKFLOW_ID:0:7}
    rollback_environment:
        description: Destroy kubernetes server and front-end cloudformation stacks given a workflow ID.  
        steps:
            - run:
                name: Clean S3 folder
                when: on_fail
                command: |
                    aws s3 rm s3://image-converter-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            - run:
                name: Destroy environments
                when: on_fail
                command: |
                    aws cloudformation delete-stack --stack-name image-converter-frontend-${CIRCLE_WORKFLOW_ID:0:7}
                    aws cloudformation delete-stack --stack-name image-converter-kubernetes-${CIRCLE_WORKFLOW_ID:0:7}
                    aws cloudformation delete-stack --stack-name image-converter-kubernetes-network-${CIRCLE_WORKFLOW_ID:0:7}
    
jobs:
    lint-infrastructure-cloudfront:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - run:
                name: Install cfn-lint
                command: |
                    pip install cfn-lint
            - run:
                name: Lint AWS Cloudfront File
                command: |
                    cd .circleci/aws
                    cfn-lint -t cloudfront.yml
    lint-infrastructure-frontend:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - run:
                name: Install cfn-lint
                command: |
                    pip install cfn-lint
            - run:
                name: Lint AWS Frontend File
                command: |
                    cd .circleci/aws
                    cfn-lint -t frontend.yml
    lint-infrastructure-network:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - run:
                name: Install cfn-lint
                command: |
                    pip install cfn-lint
            - run:
                name: Lint AWS Network File
                command: |
                    cd .circleci/aws
                    cfn-lint -t network.yml
    lint-infrastructure-kubernetes:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - run:
                name: Install cfn-lint
                command: |
                    pip install cfn-lint
            - run:
                name: Lint AWS Kubernetes File
                command: |
                    cd .circleci/aws
                    cfn-lint -t kubernetes.yml
    build-frontend:
        docker:
            - image: node:18.14-buster
        steps:
            - checkout
            - run:
                name: Build front-end
                command: |
                    cd frontend;
                    make build;
            - save_cache:
                paths: [frontend/node_modules]
                key: frontend-build
            # - notify_slack_error
            # - notify_slack_pass

    build-microservice-gateway:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - run:
                name: Run Build for Micoservice Gateway
                command: |
                    cd microservices/server_gateway
                    make build
            - save_cache:
                key: v1-dependencies-{{ .Environment.CIRCLE_WORKFLOW_ID }}-{{ checksum "microservices/server_gateway/requirements.txt" }}
                paths:
                    - "microservices/server_gateway/venv"
            # - notify_slack_error
            # - notify_slack_pass
    
    build-microservice-jpg:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - run:
                name: Run Build for Microservice Server Jpg
                command: |
                    cd microservices/server_jpg
                    make build
            - save_cache:
                key: v1-dependencies-{{ .Environment.CIRCLE_WORKFLOW_ID }}-{{ checksum "microservices/server_jpg/requirements.txt" }}
                paths:
                    - "microservices/server_jpg/venv"
            # - notify_slack_error
            # - notify_slack_pass

    build-microservice-png:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - run:
                name: Run Build for Microservice Server Png
                command: |
                    cd microservices/server_png
                    make build
            - save_cache:
                key: v1-dependencies-{{ .Environment.CIRCLE_WORKFLOW_ID }}-{{ checksum "microservices/server_png/requirements.txt" }}
                paths:
                    - "microservices/server_png/venv"
            # - notify_slack_error
            # - notify_slack_pass
    
    build-microservice-webp:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - run:
                name: Run Build for Microservice Webp
                command: |
                    cd microservices/server_webp
                    make build
            - save_cache:
                key: v1-dependencies-{{ .Environment.CIRCLE_WORKFLOW_ID }}-{{ checksum "microservices/server_webp/requirements.txt" }}
                paths:
                    - "microservices/server_webp/venv"
            # - notify_slack_error
            # - notify_slack_pass

    test-frontend:
        docker:
            - image: node:18.14-buster
        steps:
            - checkout
            - restore_cache:
                keys: [frontend-build]
            - run:
                name: Run frontend test
                command: |
                    cd frontend
                    make test
            # - notify_slack_error
            # - notify_slack_pass

    test-microservice-gateway:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - restore_cache:
                keys:
                    - v1-dependencies-{{ .Environment.CIRCLE_WORKFLOW_ID }}-{{ checksum "microservices/server_gateway/requirements.txt" }}
                    - v1-dependencies-
            - run:
                name: Run Test for Microservice Server Gateway
                command: |
                    cd microservices/server_gateway
                    make test
            # - notify_slack_error
            # - notify_slack_pass
    
    test-microservice-server-jpg:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - restore_cache:
                keys:
                    - v1-dependencies-{{ .Environment.CIRCLE_WORKFLOW_ID }}-{{ checksum "microservices/server_jpg/requirements.txt" }}
                    - v1-dependencies-
            - run:
                name: Run Test for Microservice Server Jpg
                command: |
                    cd microservices/server_jpg
                    make test
            # - notify_slack_error
            # - notify_slack_pass
    
    test-microservice-server-png:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - restore_cache:
                keys:
                    - v1-dependencies-{{ .Environment.CIRCLE_WORKFLOW_ID }}-{{ checksum "microservices/server_png/requirements.txt" }}
                    - v1-dependencies-
            - run:
                name: Run Test for Microservice Server Png 
                command: |
                    cd microservices/server_png
                    make test
            # - notify_slack_error
            # - notify_slack_pass
    
    test-microservice-server-webp:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - restore_cache:
                keys:
                    - v1-dependencies-{{ .Environment.CIRCLE_WORKFLOW_ID }}-{{ checksum "microservices/server_webp/requirements.txt" }}
                    - v1-dependencies-
            - run:
                name: Run Test for Microservice Server Webp
                command: |
                    cd microservices/server_webp
                    make test
            # - notify_slack_error
            # - notify_slack_pass

    scan-frontend:
        docker:
            - image: node:18.14-buster
        steps:
            - checkout
            - restore_cache:
                keys: [frontend-build]
            - run:
                name: Run frontend scan
                command: |
                    cd frontend
                    make scan
            # - notify_slack_error
            # - notify_slack_pass

    scan-microservice-gateway:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - restore_cache:
                keys:
                    - v1-dependencies-{{ .Environment.CIRCLE_WORKFLOW_ID }}-{{ checksum "microservices/server_gateway/requirements.txt" }}
                    - v1-dependencies-
            - run:
                name: Scan Microservice Server Gateway
                command: |
                    cd microservices/server_gateway
                    make scan
            # - notify_slack_error
            # - notify_slack_pass
    
    scan-microservice-server-jpg:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - restore_cache:
                keys:
                    - v1-dependencies-{{ .Environment.CIRCLE_WORKFLOW_ID }}-{{ checksum "microservices/server_jpg/requirements.txt" }}
                    - v1-dependencies-
            - run:
                name: Scan Microservice Server Jpg
                command: |
                    cd microservices/server_jpg
                    make scan
            # - notify_slack_error
            # - notify_slack_pass
    
    scan-microservice-server-png:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - restore_cache:
                keys:
                    - v1-dependencies-{{ .Environment.CIRCLE_WORKFLOW_ID }}-{{ checksum "microservices/server_png/requirements.txt" }}
                    - v1-dependencies-
            - run:
                name: Scan Microservice Server Png
                command: |
                    cd microservices/server_png
                    make scan
            # - notify_slack_error
            # - notify_slack_pass
    
    scan-microservice-server-webp:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - restore_cache:
                keys:
                    - v1-dependencies-{{ .Environment.CIRCLE_WORKFLOW_ID }}-{{ checksum "microservices/server_webp/requirements.txt" }}
                    - v1-dependencies-
            - run:
                name: Scan Microservice Server Webp
                command: |
                    cd microservices/server_webp
                    make scan
            # - notify_slack_error
            # - notify_slack_pass

    lint-frontend:
        docker:
            - image: node:18.14-buster
        steps:
            - checkout
            - restore_cache:
                keys: [frontend-build]
            - run:
                name: Run frontend test
                command: |
                    cd frontend
                    make lint
            # - notify_slack_error
            # - notify_slack_pass
    
    lint-microservice-gateway:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - restore_cache:
                keys:
                    - v1-dependencies-{{ .Environment.CIRCLE_WORKFLOW_ID }}-{{ checksum "microservices/server_gateway/requirements.txt" }}
                    - v1-dependencies-
            - run:
                name: Install Hadolint
                command: |
                    wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64 &&\
                    chmod +x /bin/hadolint
                    export PATH="/bin/hadolint:$PATH"
                    source ~/.bashrc
            - run:
                name: Lint Microservice Server Gateway
                command: |
                    cd microservices/server_gateway
                    make lint
            # - notify_slack_error
            # - notify_slack_pass

    lint-microservice-server-jpg:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - restore_cache:
                keys:
                    - v1-dependencies-{{ .Environment.CIRCLE_WORKFLOW_ID }}-{{ checksum "microservices/server_jpg/requirements.txt" }}
                    - v1-dependencies-
            - run:
                name: Install Hadolint
                command: |
                    wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64 &&\
                    chmod +x /bin/hadolint
                    export PATH="/bin/hadolint:$PATH"
                    source ~/.bashrc
            - run:
                name: Lint Microservice Server JPG
                command: |
                    cd microservices/server_jpg
                    make lint
            # - notify_slack_error
            # - notify_slack_pass

    lint-microservice-server-png:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - restore_cache:
                keys:
                    - v1-dependencies-{{ .Environment.CIRCLE_WORKFLOW_ID }}-{{ checksum "microservices/server_png/requirements.txt" }}
                    - v1-dependencies-
            - run:
                name: Install Hadolint
                command: |
                    wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64 &&\
                    chmod +x /bin/hadolint
                    export PATH="/bin/hadolint:$PATH"
                    source ~/.bashrc
            - run:
                name: Lint Microservice Server PNG
                command: |
                    cd microservices/server_png
                    make lint
            # - notify_slack_error
            # - notify_slack_pass

    lint-microservice-server-webp:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - restore_cache:
                keys:
                    - v1-dependencies-{{ .Environment.CIRCLE_WORKFLOW_ID }}-{{ checksum "microservices/server_webp/requirements.txt" }}
                    - v1-dependencies-
            - run:
                name: Install Hadolint
                command: |
                    wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64 &&\
                    chmod +x /bin/hadolint
                    export PATH="/bin/hadolint:$PATH"
                    source ~/.bashrc
            - run:
                name: Lint Microservice Server WEBP
                command: |
                    cd microservices/server_webp
                    make lint
            # - notify_slack_error
            # - notify_slack_pass

    deploy-microservice-gateway:
        docker:
            - image: cimg/base:2021.04
        steps:
            - checkout
            - setup_remote_docker
            - run:
                name: Deploy containers to Docker Hub
                command: |
                    cd microservices/server_gateway;
                    make deploy;
            # - rollback_environment
            # - notify_slack_error
            # - notify_slack_pass

    deploy-microservice-server-jpg:
        docker:
            - image: cimg/base:2021.04
        steps:
            - checkout
            - setup_remote_docker
            - run:
                name: Deploy containers to Docker Hub
                command: |
                    cd microservices/server_jpg;
                    make deploy;
            # - rollback_environment
            # - notify_slack_error
            # - notify_slack_pass

    deploy-microservice-server-png:
        docker:
            - image: cimg/base:2021.04
        steps:
            - checkout
            - setup_remote_docker
            - run:
                name: Deploy Microservice Png
                command: |
                    cd microservices/server_png
                    make deploy
            # - rollback_environment
            # - notify_slack_error
            # - notify_slack_pass

    deploy-microservice-server-webp:
        docker:
            - image: cimg/base:2021.04
        steps:
            - checkout
            - setup_remote_docker
            - run:
                name: Deploy containers to Docker Hub
                command: |
                    cd microservices/server_webp;
                    make deploy;
            # - rollback_environment
            # - notify_slack_error
            # - notify_slack_pass

    test-integration-microservices:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - kubernetes/install
            - run:
                name: Start Kubernetes
                command: |
                    python3 -m venv ./venv &&\
                    ./venv/bin/pip install -r requirements.txt &&\
                    ./venv/bin/python3 ./prepare_docker.py &&\
                    ./venv/bin/python3 ./prepare_kubernetes.py &&\
                    kubectl apply -f ./.circleci/kubernetes/local_namespaces_src/ &&\
                    kubectl apply -f ./.circleci/kubernetes/local_base_redis_src/ &&\
                    kubectl apply -f ./.circleci/kubernetes/prod_namespaces_src/ &&\
                    kubectl apply -f ./.circleci/kubernetes/prod_base_src/ &&\
                    sh setup_redis_cluster.sh
            - run:
                name: Perform Microservices Integration Tests
                command: |
                    kubectl expose deployment/gateway-deployment -n image-converter-main --type="NodePort" --port 8010
                    NODE_PORT="$(kubectl get services/gateway-deployment -n image-converter-main -o go-template='{{(index .spec.ports 0).nodePort}}')"
                    export KUBERNETES_SERVICE_URL="http://$(minikube ip):$NODE_PORT"
                    ./venv/bin/python3 -m unittest tests/integration_microservices/test_app.py
            # - notify_slack_error
            # - notify_slack_pass
    
    deploy-infrastructure-network:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - run:
                name: Update packages
                command: |
                    apt update
            - run:
                name: Install dependencies (AWS-Cli)
                command: |
                    apt-get -y install awscli
            - run:
                name: Ensure Kubernetes Network Infrastructure exists
                command: |
                    CURRENT_DIR=$(pwd);
                    aws cloudformation deploy \
                    --template-file .circleci/aws/network.yml \
                    --stack-name "image-converter-kubernetes-network-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --parameter-overrides "file://$CURRENT_DIR/.circleci/aws/network-parameters.json" \
                    --tags project=image-converter type=network
            # - check_aws_status_network
            # - rollback_environment
            # - notify_slack_error
            # - notify_slack_pass

    deploy-infrastructure-kubernetes:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - run:
                name: Update packages
                command: |
                    apt update
            - run:
                name: Install dependencies (AWS-Cli)
                command: |
                    apt-get -y install awscli
            - run:
                name: Ensure Kubernetes Infrastructure exists
                no_output_timeout: 20m
                command: |
                    CURRENT_DIR=$(pwd);
                    aws cloudformation deploy \
                    --template-file .circleci/aws/kubernetes.yml \
                    --stack-name "image-converter-kubernetes-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --parameter-overrides "file://$CURRENT_DIR/.circleci/aws/kubernetes-parameters.json" \
                    --capabilities CAPABILITY_IAM \
                    --tags project=image-converter type=kubernetes
            # - check_aws_status_kubernetes
            # - rollback_environment
            # - notify_slack_error
            # - notify_slack_pass

    deploy-infrastructure-frontend:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - run:
                name: Update packages
                command: |
                    apt update
            - run:
                name: Install dependencies (AWS-Cli)
                command: |
                    apt-get -y install awscli
            - run:
                name: Ensure front-end infrastructure exist
                no_output_timeout: 20m
                command: |
                    CURRENT_DIR=$(pwd);
                    aws cloudformation deploy \
                    --template-file .circleci/aws/frontend.yml \
                    --stack-name "image-converter-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
                    --tags project=image-converter type=frontend
            # - check_aws_status_front_end
            # - rollback_environment
            # - notify_slack_error
            # - notify_slack_pass
    
    setup-kubernetes-cluster:
        docker:
            - image: python:3.10-buster
        parameters:
            cluster-name:
                description: |
                    Name of the EKS cluster
                type: string
        steps:
            - checkout
            - kubernetes/install
            - aws-eks/update-kubeconfig-with-authenticator:
                cluster-name: << parameters.cluster-name >>
            - run:
                name: Update packages
                command: |
                    apt update
            - run:
                name: Install dependencies (AWS-Cli)
                command: |
                    apt-get -y install awscli
            - run:
                name: Install dotenv
                command: |
                    pip install python-dotenv==1.0.0
            - run:
                name: Set necessary environment variables required by production-level kubernetes cluster
                command: |
                    export URL_FRONTEND="http://image-converter-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com"
            - run:
                name: Prepare Kubernetes Source Files
                command: |
                    python3 prepare_kubernetes.py
            - run:
                name: Apply Kubernetes config files via kubectl
                command: |
                    kubectl apply -f ./.circleci/kubernetes/prod_namespaces_src/ &&\
                    kubectl apply -f ./.circleci/kubernetes/prod_base_src/
            - run:
                name: Turn on kubectl verbosity and examine logs
                command: |
                    kubectl get svc --v=9
            - run:
                name: Verify that the Amazon EKS API server is accessible
                command: |
                    aws eks describe-cluster --name prod --region us-east-1 --query cluster.resourcesVpcConfig
            - run:
                name: Wait until all pods are deployed
                command: |
                    kubectl rollout status --watch --timeout=600s deployment -n image-converter-main
            - run:
                name: Check and see if Kubernetes pods are up and running
                command: |
                    kubectl get pods -n image-converter-main
            - run:
                name: Check and see if Kubernetes services are up and running
                command: |
                    kubectl get services -n image-converter-main
            # - rollback_environment
            # - notify_slack_error
            # - notify_slack_pass
    
    deploy-frontend:
        docker:
            - image: node:18.14-buster
        parameters:
            cluster-name:
                description: |
                    Name of the EKS cluster
                type: string
        steps:
            - checkout
            - kubernetes/install
            - aws-eks/update-kubeconfig-with-authenticator:
                cluster-name: << parameters.cluster-name >>
            - run:
                name: Update packages
                command: |
                    apt update
            - run:
                name: Install dependencies (tar)
                command: |
                    apt-get -y install tar
            - run:
                name: Update packages
                command: |
                    apt update
            - run:
                name: Install dependencies (jq)
                command: |
                    apt-get -y install jq
            - run:
                name: Get microservice url
                command: |
                    KUBERNETES_SERVER_URL=$(kubectl get services/gateway-service --namespace=image-converter-main -o json | jq -r '.status.loadBalancer.ingress[0].hostname')
                    API_URL="http://${KUBERNETES_SERVER_URL}:${SERVER_GATEWAY_PORT}"
                    echo VITE_API_URL="$API_URL" >> frontend/.env

                    cat frontend/.env
            - run:
                name: Set other environment variables
                command: |
                    echo VITE_IS_PRODUCTION="true" >> frontend/.env

                    cat frontend/.env
            - run:
                name: Deploy frontend objects
                command: |
                    cd frontend
                    npm install

                    npm run build
                    tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
                    aws s3 cp dist s3://image-converter-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            # - rollback_environment
            # - notify_slack_error
            # - notify_slack_pass

    smoke-test:
        docker:
            - image: python:3.10-buster
        parameters:
            cluster-name:
                description: |
                    Name of the EKS cluster
                type: string
        steps:
            - checkout
            - kubernetes/install
            - aws-eks/update-kubeconfig-with-authenticator:
                cluster-name: << parameters.cluster-name >>
            - run:
                name: Update packages
                command: |
                    apt update
            - run:
                name: Install dependencies (Curl)
                command: |
                    apt-get -y install curl
            - run:
                name: Install dependencies (jq)
                command: |
                    apt-get -y install jq
            - run:
                name: Install dependencies (AWS-Cli)
                command: |
                    apt-get -y install awscli
            - run:
                name: Extract external IP
                command: |
                    kubectl get services/gateway-service --namespace=image-converter-main -o json
                    kubectl get services/gateway-service --namespace=image-converter-main -o json | jq -r '.status.loadBalancer.ingress[0].hostname'
            - run:
                name: Microservices smoke test.
                command: |
                    KUBERNETES_SERVER_URL=$(kubectl get services/gateway-service --namespace=image-converter-main -o json | jq -r '.status.loadBalancer.ingress[0].hostname')
                    API_URL="http://${KUBERNETES_SERVER_URL}:${SERVER_GATEWAY_PORT}"
                    echo "API URL: ${API_URL}"

                    if curl "${API_URL}/health/" | grep "ok"
                    then
                        exit 0
                    else
                        exit 1
                    fi
            - run:
                name: Examine the logs of pods to see if GET request has been reached
                command: |
                    kubectl logs --selector app=gateway
            - run:
                name: Frontend smoke test.
                command: |
                    URL="http://image-converter-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/"            
                    echo ${URL} 
                    if curl -s ${URL} | grep "<title>Image Format Converter</title>"
                    then
                        exit 0
                    else
                        exit 1
                    fi
            # - rollback_environment
            # - notify_slack_error
            # - notify_slack_pass   

    cloudfront-update:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - run:
                name: Update packages
                command: |
                    apt update
            - run:
                name: Install dependencies (AWS-Cli)
                command: |
                    apt-get -y install awscli
            - run:
                name: Update cloudfront distribution
                command: |
                    aws cloudformation deploy \
                    --template-file .circleci/aws/cloudfront.yml \
                    --stack-name Cloudfront \
                    --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
                    --tags project=image-converter
            # - rollback_environment
            # - notify_slack_error
            # - notify_slack_pass
    
    cleanup:
        docker:
            - image: python:3.10-buster
        steps:
            - checkout
            - run:
                name: Update packages
                command: |
                    apt update
            - run:
                name: Install dependencies (AWS-Cli)
                command: |
                    apt-get -y install awscli
            - run:
                name: Get old stack workflow id
                command: |
                    export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
                    echo OldWorkflowID: "${OldWorkflowID}"
                    echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
                    # Fetch the stack names          
                    export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
                    echo Stack names: "${STACKS[@]}" 
            - run:
                name: Remove old stacks and files
                command: |
                    if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
                    then
                        aws s3 rm "s3://image-converter-${OldWorkflowID}" --recursive
                        aws cloudformation delete-stack --stack-name image-converter-frontend-${OldWorkflowID}
                        aws cloudformation delete-stack --stack-name image-converter-kubernetes-${OldWorkflowID}
                        aws cloudformation delete-stack --stack-name image-converter-kubernetes-network-${OldWorkflowID}
                    fi
            # - rollback_environment
            # - notify_slack_error
            # - notify_slack_pass

workflows:
    default:
        jobs:
            - build-frontend
            - build-microservice-gateway
            - build-microservice-jpg
            - build-microservice-png
            - build-microservice-webp
            - lint-infrastructure-cloudfront
            - lint-infrastructure-frontend
            - lint-infrastructure-network
            - lint-infrastructure-kubernetes
            - test-frontend:
                requires: [build-frontend]
            - test-microservice-gateway:
                requires: [build-microservice-gateway]
            - test-microservice-server-jpg:
                requires: [build-microservice-jpg]
            - test-microservice-server-png:
                requires: [build-microservice-png]
            - test-microservice-server-webp:
                requires: [build-microservice-webp]
            - scan-frontend:
                requires: [build-frontend]
            - scan-microservice-gateway:
                requires: [build-microservice-gateway]
            - scan-microservice-server-jpg:
                requires: [build-microservice-jpg]
            - scan-microservice-server-png:
                requires: [build-microservice-png]
            - scan-microservice-server-webp:
                requires: [build-microservice-webp]
            - lint-frontend:
                requires: [build-frontend]
            - lint-microservice-gateway:
                requires: [build-microservice-gateway]
            - lint-microservice-server-jpg:
                requires: [build-microservice-jpg]
            - lint-microservice-server-png:
                requires: [build-microservice-png]
            - lint-microservice-server-webp:
                requires: [build-microservice-webp]
            - deploy-microservice-gateway:
                requires: [scan-microservice-gateway, lint-microservice-gateway]
            - deploy-microservice-server-jpg:
                requires: [scan-microservice-server-jpg, lint-microservice-server-jpg, test-microservice-server-jpg]
            - deploy-microservice-server-png:
                requires: [scan-microservice-server-png, lint-microservice-server-png, test-microservice-server-png]
            - deploy-microservice-server-webp:
                requires: [scan-microservice-server-webp, lint-microservice-server-webp, test-microservice-server-webp]
            # - test-integration-microservices:
            #     requires: [deploy-microservice-gateway, deploy-microservice-server-jpg, deploy-microservice-server-png, deploy-microservice-server-webp]
            - deploy-infrastructure-network:
                requires: [test-frontend, scan-frontend, lint-frontend, lint-infrastructure-cloudfront,lint-infrastructure-frontend,lint-infrastructure-network,lint-infrastructure-kubernetes, deploy-microservice-gateway, deploy-microservice-server-jpg, deploy-microservice-server-png, deploy-microservice-server-webp]
                filters:
                    branches:
                        only: [main]
            # - deploy-infrastructure-network:
            #     requires: [lint-infrastructure-cloudfront,lint-infrastructure-frontend,lint-infrastructure-network,lint-infrastructure-kubernetes, test-integration-microservices]
            #     filters:
            #         branches:
            #             only: [main]
            - deploy-infrastructure-kubernetes:
                requires: [deploy-infrastructure-network]
            - deploy-infrastructure-frontend:
                requires: [deploy-infrastructure-network]
            - setup-kubernetes-cluster:
                cluster-name: prod
                requires: [deploy-infrastructure-kubernetes]
            - deploy-frontend:
                cluster-name: prod
                requires: [deploy-infrastructure-frontend, setup-kubernetes-cluster]
            - smoke-test:
                cluster-name: prod
                requires: [deploy-frontend]
            - cloudfront-update:
                requires: [smoke-test]
            - cleanup:
                requires: [cloudfront-update]
